#!/bin/sh
# Signs and notarizes a MacOS build
#
# Parameters
# 1. Path to file to sign, then notarize
# 2. Bundle id to use during notarization
# 3. Signing ID file like 'certificate.p12'
# 4. Password for above p12 file
# 5. Username for notarization
# 6. App-specific password for notarization

set -eu

# --- Cleanup in case of faulty exit

function cleanup {
    echo ">>> Cleanup <<<"
    security delete-keychain build.keychain
}

# --- Function to check for notarization results

check_notarization() {
    local REQUID=$1
    local USERNAME=$2
    local USERPWD=$3
    local STATUS="in progress"
    while [ "$STATUS" == "in progress" ]
    do
        echo "Wait 30s for results..."
        sleep 30
        STATUS=`xcrun altool --notarization-info "$REQUID" -u "$USERNAME" -p "$USERPWD" | egrep -o '(in progress|success|invalid)'`
    done

    case $STATUS in
        success)    echo ">>> SUCCESS <<<"
                    return 0
                    ;;
        invalid)    echo "%%% INVALID %%%"
                    return 1
                    ;;
        *)          echo "Unknown status $STATUS"
                    return 1
                    ;;
    esac
}

# ==================================================================
# Read parameters

if (( $# < 6 ))
then
    echo "$0 requires 6 parameters, check script!"
    exit 1
fi

PATH_TO_FILE=$1
BUNDLE_ID=$2
SIGN_ID_FILE=$3
SIGN_ID_PWD=$4
NOTAR_USER=$5
NOTAR_PWD=$6

# --- Sign

echo .
echo "--- Sign ---"
echo .

# Taken from https://localazy.com/blog/how-to-automatically-sign-macos-apps-using-github-actions
# Create a temporary keychain and import the given certificate
security create-keychain -p NotSoSecretAPwd build.keychain
trap cleanup EXIT           # Make sure the keychain gets removed in case of failure exit
security default-keychain -s build.keychain
security unlock-keychain -p NotSoSecretAPwd build.keychain
security import "$SIGN_ID_FILE" -P "$SIGN_ID_PWD" -k build.keychain -T /usr/bin/codesign
# Allow some tools to use the keychain
security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k NotSoSecretAPwd build.keychain
# Actually sign
security find-identity -v build.keychain
export MACOS_IDENTITY=`security find-identity -v build.keychain | egrep -o '[0-9A-F]{40}'`
echo MACOS_IDENTITY = $MACOS_IDENTITY
codesign --force --keychain build.keychain -s $MACOS_IDENTITY "$PATH_TO_FILE" -v
codesign --verify --verbose "$PATH_TO_FILE"

# --- Notarize LiveTraffic and XPMP2-Remote ---

echo .
echo "--- Notarize ---"
echo .

# Can only send zip archives to notarization
zip -v "$PATH_TO_FILE.zip" "$PATH_TO_FILE"
REQUID=`xcrun altool --notarize-app --primary-bundle-id "$BUNDLE_ID" --username "$NOTAR_USER" --password "$NOTAR_PWD" --file "$PATH_TO_FILE.zip" | egrep -o '([a-z0-9]+-){4}[a-z0-9]+'`
rm "$PATH_TO_FILE.zip"

# --- Check notarization results ---

echo .
echo "--- Check notarization results ---"
echo .

check_notarization "$REQUID" "$NOTAR_USER" "$NOTAR_PWD"

# Note: No stapling possible to .xpl files

echo .
echo "*** SIGNED and NOTARIZED ***"
exit 0